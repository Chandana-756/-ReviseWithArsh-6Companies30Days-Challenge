Code:
import java.util.HashMap;
import java.util.Map;

class Solution {
    public int solve(String s, Map<String, Integer> mp, int[] dp, int idx) {
        if (idx >= s.length()) return 0;
        if (dp[idx] != -1) return dp[idx];
        String currStr = "";
        int ans = s.length();
        for (int cutIdx = idx; cutIdx < s.length(); cutIdx++) {
            currStr += s.charAt(cutIdx);
            int count = (mp.containsKey(currStr) ? 0 : currStr.length()) + solve(s, mp, dp, cutIdx + 1);
            ans = Math.min(ans, count);
        }
        dp[idx] = ans;
        return ans;
    }

    public int minExtraChar(String s, String[] dictionary) {
        int[] dp = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            dp[i] = -1;
        }

        Map<String, Integer> mp = new HashMap<>();
        for (String word : dictionary) {
            mp.put(word, mp.getOrDefault(word, 0) + 1);
        }

        int ans = solve(s, mp, dp, 0);
        return ans;
    }
}

Time Complexity: O(n^2)
Space Complexity: O(n*s) where s is size of each string
