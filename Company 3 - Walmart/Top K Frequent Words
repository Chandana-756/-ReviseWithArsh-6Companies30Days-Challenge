Approach: First we need to keep a count of words in a hashmap and insert them into priority queue becuase priority queue helps 
in sort in particular order.

Code:
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        List<String> result = new LinkedList<>();
        Map<String,Integer> map = new HashMap<>();
        for(String word:words){
            if(map.containsKey(word))
                map.put(word, map.get(word) +1);
            else
                map.put(word,1);
        }
        
        PriorityQueue<Map.Entry<String,Integer>> pq = new PriorityQueue<>(
        (a,b) -> a.getValue()==b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue()-b.getValue()
        );
        
        for(Map.Entry<String,Integer> entry : map.entrySet()){
            pq.offer(entry);
            if(pq.size()>k)
                pq.poll();
        }
        
        while(!pq.isEmpty())
            result.add(0,pq.poll().getKey());
        
        return result;
    }
}

Time Complexity: O(n logk)
Space Complexity: O(n+k)
