Approach: We need to remove the elements in the array such that the remaining elements should be strictly increasing. 
After removing the elements check the possible sub arrays that can be formed and count the number of sub arrays that are formed.

Code:
class Solution {
    public int incremovableSubarrayCount(int[] nums) {
        int cnt = 0;
        int len = nums.length;
        for(int i=0; i<len; i++){
            for(int j=i; j<len; j++){
                if(isIncreasingSubArray(nums,i,j)){
                    cnt++;
                }
            }
        }
        return cnt;
    }
    public boolean isIncreasingSubArray(int[] nums, int start, int end){
        int len = nums.length;
        int prev = 0;
        for(int i = 0; i<len; i++){
            if(i <= end && i >= start){
                continue;
            }
            if(nums[i] <= prev){
                return false;
            }
            prev = nums[i];
        }
        return true;
    }
}

Time Complexity: O(n^3)
Space Complexity: O(1)
