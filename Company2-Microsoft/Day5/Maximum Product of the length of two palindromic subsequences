Code:
import java.util.Arrays;

class Solution {
    // Declare dp array
    int[][] dp;

    public int lcs(String a, String b){
        int m = a.length();
        int n = b.length();
        
        // Initialize dp array
        dp = new int[m+1][n+1];
        
        for(int i = 0; i<=m; i++){
            for(int j = 0; j < n+1; j++){
                if(i == 0 || j == 0)
                    dp[i][j] = 0;
                else if(a.charAt(i-1) == b.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[m][n];
    }

    public int answer(String s){
        // Correct way to reverse a string
        String subString = new StringBuilder(s).reverse().toString();
        return lcs(s, subString);
    }

    public int maxProduct(String s) {
        int n = s.length();
        int ans = 0;
        
        for(int i=0; i<(1<<n); i++){
            String x = "", y = "";
            for(int j=0; j<n; j++){
                if(((i >> j) & 1) == 1)
                    x += s.charAt(j);
                else
                    y += s.charAt(j);
            }
            ans = Math.max(ans, answer(x) * answer(y));
        }
        return ans;
    }
}

Time Complexity: O(2^n*m*n)
Space Complexity: O(m*n)
