Code:
class Solution {
    public String findLongestWord(String s, List<String> dictionary) {
        //Collections.sort(dictionary,(a,b) -> b.length() == a.length() ? a.compareTo(b) : b.length() - a.length());
        String result = "";
        for(String word : dictionary){
            if(isSubSequence(word,s)){
                if(word.length() > result.length() || word.length() == result.length() && word.compareTo(result) < 0){
                    result = word;
                }
            }
        }
        return result;
    }

    private boolean isSubSequence(String word, String s){
        int j = 0;
        for(int i=0; i<s.length() && j<word.length(); i++){
            if(s.charAt(i) == word.charAt(j))
                j++;
              
        }
        return j >= word.length();
    }
}

Time Complexity: O(n*m)
Space Complexity: O(1)
