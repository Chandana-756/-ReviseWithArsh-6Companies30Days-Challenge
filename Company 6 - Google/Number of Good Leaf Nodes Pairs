Code:
import java.util.ArrayList;
import java.util.List;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

public class Solution {
    private int count = 0;

    private List<Integer> helper(TreeNode root, int d) {
        if (root == null)
            return new ArrayList<>();

        // leaf found
        if (root.left == null && root.right == null)
            return List.of(1);

        List<Integer> left = helper(root.left, d);
        List<Integer> right = helper(root.right, d);

        // processing
        for (int x : left) {
            for (int y : right) {
                if (x > 0 && y > 0 && x + y <= d) {
                    count += 1;
                    // pair has been found
                }
            }
        }

        List<Integer> ans = new ArrayList<>();
        for (int x : left) {
            if (x > 0 && x < d)
                ans.add(x + 1);
        }

        for (int x : right) {
            if (x > 0 && x < d)
                ans.add(x + 1);
        }
        return ans;
    }

    public int countPairs(TreeNode root, int distance) {
        helper(root, distance);
        return count;
    }
}

Time Complexity: O(n^2) where n is number of nodes in the binary tree
Space Complexity: O(n)
